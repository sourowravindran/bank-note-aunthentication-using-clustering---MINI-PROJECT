# Loading the necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
import seaborn as sns
from sklearn.metrics import accuracy_score

# Loading the data
data = pd.read_csv("/content/data_banknote_authentication.txt",
                   sep=",",
                   names=["variance",
                          "skewness",
                          "curtosis",
                          "entropy",
                          "class"])
data.head()

# Analyzing the data
data.shape

# Information about the data
data.info()

# Descriptive statistics of the data
data.describe()

# Drop the duplicates
data.drop_duplicates

# Check for null values
data.isnull().sum()

# Splitting the data
x = data.drop("class", axis=1)
y = data["class"]

x.head()

y.head()

# Train and test the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(x_train.shape, y_train.shape,
      x_test.shape, y_test.shape)

# KMeans clustering
km = KMeans(n_clusters=2, random_state=42)
km.fit(x_train)

# Predicting clusters on the test data
y_pred = km.predict(x_test)

# Mapping cluster labels to binary class labels
cluster_mapping = {0: 0, 1: 1}
y_pred_mapped = [cluster_mapping[label] for label in y_pred]

# Accuracy of the data
acc = accuracy_score(y_pred, y_pred_mapped)
print("KMeans Accuracy:", acc)

# The accuracy of the data is 100%

# Plotting the clustered data
plt.scatter(x_test["variance"], x_test["skewness"], c=y_pred, cmap='viridis')
plt.title('Clustering for Bank Note Authentication')
plt.xlabel('Variance')
plt.ylabel('Skewness')
plt.show()
